package chess;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.concurrent.Executors;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class ChessController implements ChessDelegate, ActionListener {
	
	private String SOCKET_SERVER_ADDR = "192.168.50.170";
	private int PORT = 50000;
	
	private ChessModel chessModel = new ChessModel();
	private JFrame frame;
	private ChessView chessBoardPanel;
	private JButton resetBtn;
	private JButton serverBtn;
	private JButton clientBtn;
	
	private ServerSocket listener;
	private Socket socket;
	private PrintWriter printWriter;
	
	
	public ChessController() {
		
		chessModel.reset();
		
		frame = new JFrame("Chess");
		frame.setSize(600, 600 );
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocationRelativeTo(null);
		frame.setLayout(new BorderLayout());
		
		chessBoardPanel = new ChessView(this);
		frame.add(chessBoardPanel, BorderLayout.CENTER);
		
		var buttonsPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
		resetBtn = new JButton("Reset");
		resetBtn.addActionListener(this);
		buttonsPanel.add(resetBtn);
		serverBtn = new JButton("Listen");
		serverBtn.addActionListener(this);
		buttonsPanel.add(serverBtn);
		clientBtn = new JButton("Connect");
		clientBtn.addActionListener(this);
		buttonsPanel.add(clientBtn);
		frame.add(buttonsPanel, BorderLayout.PAGE_END);
		
		
		frame.addWindowListener(new WindowAdapter() {
			@Override 
			public void windowClosing(WindowEvent e) {
				super.windowClosing(e);
				if (printWriter != null) 
					printWriter.close();	
				try {
					socket.close();
					if(listener != null) listener.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		});
		frame.setVisible(true);
		
	}
	
	public static void main(String[] args) {
		new ChessController();
	}

	@Override
	public ChessPiece pieceAt(int col, int row) {
		return chessModel.pieceAt(col, row);
	}

	@Override
	public void movePiece(int fromCol, int fromRow, int toCol, int toRow) {
		chessModel.movePiece(fromCol, fromRow, toCol, toRow);
		chessBoardPanel.repaint();
		if(printWriter != null) {
			printWriter.println(fromCol + "," + fromRow + "," + toCol + "," + toRow );			
		}
		
	}
	
	private void receiveMove(Scanner scanner) {
		while(scanner.hasNextLine()) {
			var moveStr = scanner.nextLine();
			System.out.println("chess move received: " + moveStr);
			var moveStrArr = moveStr.split(",");
			var fromCol = Integer.parseInt(moveStrArr[0]);
			var fromRow = Integer.parseInt(moveStrArr[1]);
			var toCol = Integer.parseInt(moveStrArr[2]);
			var toRow = Integer.parseInt(moveStrArr[3]);
			SwingUtilities.invokeLater(new Runnable() {
				@Override
				public void run() {
					chessModel.movePiece(fromCol, fromRow, toCol, toRow);
					chessBoardPanel.repaint();
				}
			});
		}
	}
	
	private void runSocketServer() {
		Executors.newFixedThreadPool(1).execute(new Runnable() {
			@Override
			public void run() {
				try{
					listener = new ServerSocket(PORT);
					System.out.println("server is listening to port " + PORT);
					socket = listener.accept();
					printWriter = new PrintWriter(socket.getOutputStream(), true);
					var scanner = new Scanner(socket.getInputStream());
					receiveMove(scanner);
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		});
	}
	
	private void runSocketClient() {
		try {
			socket = new Socket("localhost", PORT);
			System.out.println("client connected to port " + PORT);
			var scanner = new Scanner(socket.getInputStream());		
			printWriter = new PrintWriter(socket.getOutputStream(), true);	
			Executors.newFixedThreadPool(1).execute(new Runnable() {
				@Override
				public void run() {
					receiveMove(scanner);						
				}
			});
		}  catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == resetBtn) {
			chessModel.reset();
			chessBoardPanel.repaint();
			try {
				if (listener != null) {
					listener.close();
				}
				if (socket != null) {
					socket.close();					
				}
				serverBtn.setEnabled(true);
				clientBtn.setEnabled(true);
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		if(e.getSource() == serverBtn) {
			frame.setTitle("Chess server");
			runSocketServer();
			serverBtn.setEnabled(false);
			clientBtn.setEnabled(false);
			JOptionPane.showMessageDialog(frame, "listening on port " + PORT);
		}
		if(e.getSource() == clientBtn) {
			serverBtn.setEnabled(false);
			clientBtn.setEnabled(false);
			frame.setTitle("Chess server");
			System.out.println("connect (for socket clinet clicked)");
			runSocketClient();
			JOptionPane.showMessageDialog(frame, "connected on port " + PORT);
		}
		
	}
}
